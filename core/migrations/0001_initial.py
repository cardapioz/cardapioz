# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-17 18:46
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_resized.forms
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=30, verbose_name='nome')),
                ('locale', models.CharField(default='', max_length=200)),
                ('gender', models.CharField(default='', max_length=40)),
                ('last_name', models.CharField(max_length=30, verbose_name='sobrenome')),
                ('email', models.EmailField(error_messages={'unique': 'este email já está em uso.'}, max_length=255, unique=True, verbose_name='email')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'este nome de usuario já esta em uso'}, help_text='Não pode conter caracteres especiais.', max_length=30, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@+-]+$', 32), 'Digite um nome valido.', 'invalid')], verbose_name='username')),
                ('sexo', models.BooleanField(choices=[(0, 'Masculino'), (1, 'Feminino')], default=0)),
                ('user_photo', django_resized.forms.ResizedImageField(blank=True, upload_to='users_photos')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data de criação')),
                ('is_staff', models.BooleanField(default=False, help_text='Define se é admin.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Define se o usuario está ativo.', verbose_name='Email ativado')),
                ('is_pass', models.BooleanField(default=False, help_text='Possui senha', verbose_name='Cadastrou senha? ')),
                ('is_trusty', models.BooleanField(default=False, help_text='Define se a conta é ativada.', verbose_name='Conta Ativa')),
                ('type_user', models.BooleanField(default=False, help_text='define se é empresa ou usuario normal', verbose_name='empresa')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=35)),
                ('slug', models.CharField(max_length=250)),
                ('created_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='MyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image1', django_resized.forms.ResizedImageField(upload_to='whatever')),
            ],
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=30)),
                ('description', models.CharField(default='', max_length=300)),
                ('category', models.IntegerField(choices=[(0, 'Lanches'), (1, 'Almoço')], default=0)),
                ('amount', models.IntegerField(default=1)),
                ('price', models.FloatField(default=0)),
                ('photo_thumb', django_resized.forms.ResizedImageField(blank=True, upload_to='products_photos/thumb')),
                ('photo_medium', django_resized.forms.ResizedImageField(upload_to='products_photos/medium')),
                ('data_create', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_published', models.DateTimeField(default=django.utils.timezone.now)),
                ('ingredients', models.ManyToManyField(blank=True, related_name='ingredientes', to='core.Ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='UserBusiness',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('cnpj', models.CharField(default='', max_length=21)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.user',),
        ),
        migrations.AddField(
            model_name='produto',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
